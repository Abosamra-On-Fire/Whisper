// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// we can make multi-schema files in a folder but need config in generator or merge all models in one schema file

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "driverAdapters", "prismaSchemaFolder"]
}

model User {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  name             String
  password         String       @db.VarChar(256)
  email_status     String       @default("Deactivated")
  verfication_code Verification?
  messages    Message[]       // One-to-many relationship with Message
  participants ChatParticipant[] // One-to-many relationship with ChatParticipant
}

model Verification {
    id         Int      @id @default(autoincrement())
    code       String   @unique
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user_id    Int      @unique
    created_at DateTime @default(now())
}

// Chat Model
model Chat {
  id           Int              @id @default(autoincrement())
  lastActivity DateTime         @default(now()) 
  participants ChatParticipant[] 
  messages     ChatMessage[] 
}

// Message Model
model Message {
  id        Int           @id @default(autoincrement())
  content   String
  senderId  Int           // Reference to the User who sent the message
  createdAt DateTime      @default(now()) 
  sender    User          @relation(fields: [senderId], references: [id])
  chatMessage ChatMessage? // One-to-one relationship with ChatMessage
}

// ChatParticipant Model
model ChatParticipant {
  id      Int    @id @default(autoincrement())
  chatId  Int    
  userId  Int    
  chat    Chat   @relation(fields: [chatId], references: [id]) 
  user    User   @relation(fields: [userId], references: [id]) 

  @@unique([chatId, userId]) 
}

// ChatMessage Model 
// did it this way since there will also be group and community messages
model ChatMessage {
  id        Int       @id @default(autoincrement())
  messageId Int       @unique // Ensures one-to-one relationship with Message
  chatId    Int       // Reference to the Chat
  message   Message   @relation(fields: [messageId], references: [id]) // Relation to Message
  chat      Chat      @relation(fields: [chatId], references: [id])    // Relation to Chat
}




